using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenccFmmsegLib
{
    public sealed class OpenccFmmseg : IDisposable
    {
        // Define constants
        private const string DllPath = "opencc_fmmseg_capi"; // Change this to the actual path of your DLL

        private static readonly HashSet<string> ConfigList = new HashSet<string>()
        {
            "s2t", "t2s", "s2tw", "tw2s", "s2twp", "tw2sp", "s2hk", "hk2s", "t2tw", "t2twp", "t2hk", "tw2t", "tw2tp",
            "hk2t", "t2jp", "jp2t"
        };

        private IntPtr _openccInstance;
        private bool _disposed;

        // Define DLL functions using P/Invoke
        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr opencc_new();

        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern void opencc_delete(IntPtr opencc);

        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr opencc_convert(IntPtr opencc, byte[] input, byte[] config, bool punctuation);

        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern int opencc_zho_check(IntPtr opencc, byte[] input);

        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern void opencc_string_free(IntPtr str);

        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr opencc_last_error();

        [DllImport(DllPath, CallingConvention = CallingConvention.Cdecl)]
        private static extern void opencc_error_free(IntPtr str);

        public OpenccFmmseg()
        {
            _openccInstance = opencc_new();
            if (_openccInstance == IntPtr.Zero)
            {
                // Attempt to get a more specific error from the library if possible
                string lastError = string.Empty;
                IntPtr errorPtr = opencc_last_error();
                if (errorPtr != IntPtr.Zero)
                {
                    lastError = Utf8BytesToString(errorPtr); // Assuming PtrToStringUtf8 is safe to call here
                    opencc_error_free(errorPtr); // Clean up the error string
                }

                throw new InvalidOperationException($"Failed to initialize OpenCC. {lastError}".Trim());
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (_disposed) return;
            if (disposing)
            {
                // Dispose managed state (managed objects).
                // Currently, OpenccFmmseg does not have any managed IDisposable resources.
                // If any were added (e.g., a StreamWriter field),
                // they would be disposed here.
            }

            if (_openccInstance != IntPtr.Zero)
            {
                opencc_delete(_openccInstance);
                _openccInstance = IntPtr.Zero;
            }

            _disposed = true;
        }

        // Finalizer (destructor)
        ~OpenccFmmseg()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(false);
        }

        public string Convert(string input, string config, bool punctuation = false)
        {
            if (string.IsNullOrEmpty(input)) return string.Empty;

            config = !ConfigList.Contains(config) ? "s2t" : config;

            return ConvertBy(input, config, punctuation);
        }

        private string ConvertBy(string input, string config, bool punctuation = false)
        {
            var inputBytes = Encoding.UTF8.GetBytes(input);
            var configBytes = Encoding.UTF8.GetBytes(config);

            if (_disposed) throw new ObjectDisposedException(nameof(OpenccFmmseg));

            var output =
                opencc_convert(_openccInstance, inputBytes, configBytes, punctuation);
            var convertedString = Utf8BytesToString(output);

            if (output != IntPtr.Zero) opencc_string_free(output);

            return convertedString;
        }

        public int ZhoCheck(string input)
        {
            if (string.IsNullOrEmpty(input)) return 0;
            if (_disposed) throw new ObjectDisposedException(nameof(OpenccFmmseg));

            var inputBytes = Encoding.UTF8.GetBytes(input);
            var code = opencc_zho_check(_openccInstance, inputBytes);

            return code;
        }

        public string LastError()
        {
            // LastError typically doesn't depend on the _openccInstance state for fetching, but on the library's global error state.
            var cLastError = opencc_last_error();
            string lastError;
            if (cLastError != IntPtr.Zero)
            {
                lastError = Utf8BytesToString(cLastError);
                opencc_error_free(cLastError);
            }
            else
            {
                lastError = string.Empty;
            }

            return lastError;
        }

        // private string Utf8BytesToString(IntPtr ptr)
        // {
        //     if (ptr == IntPtr.Zero) return null;
        //
        //     // Find the length of the string
        //     var len = 0;
        //     while (Marshal.ReadByte(ptr, len) != 0) len++;
        //
        //     // Read the bytes from the pointer
        //     var buffer = new byte[len];
        //     Marshal.Copy(ptr, buffer, 0, len);
        //
        //     // Convert bytes to string
        //     return Encoding.UTF8.GetString(buffer);
        // }

        private static unsafe string Utf8BytesToString(IntPtr ptr)
        {
            if (ptr == IntPtr.Zero)
                return null;

            byte* bytePtr = (byte*)ptr;
            int length = 0;

            // Find null-terminator length            
            for (byte* p = bytePtr; *p != 0; p++)
            {
                length++;
            }

            // Decode directly from the unmanaged memory
            return Encoding.UTF8.GetString(bytePtr, length);
        }
    }
}